
* UDA's

* Built-in members (init, min, max, ...)

* various forms of import statements
- static, selective, renaming, ...

* Initialization of union fields

* anonymous structs & unions
- Analysis & Lowering

* additional import paths & implicit object.d
* implicit inheritance from Object
* version declarations
* Associative arrays/Associative array literals
* module declarations
* (implicit) super constructor calls
- default constructor call insertion
- flow analysis

* Destructor and postblit calls
- use flow analysis to optimize moves

* with statements
* foreach statements
- init, stringof, ...

* pattern matching in old-style template constraints

* explicit casts from/to class references
- eg. to/from void* and to bool

* try-catch-finally statements
* scope guards
* initialization crossing check
* multi-argument struct constructors.
* struct postblit & destructors
* finish operator overloading support

* opDispatch
* member alias declarations aliasing members
- correctly provide a this pointer

* visibility
- package, protected

* alias this

* optimize analysis
- get rid of unneeded allocations
- beat DMD analysis performance

Meta:
* investigate STCref problem



DONE:
* switch statements
* declaration blocks
-  eg. private { ... }
* visibility: private

* alias declarations:
- finish support for alias to sequences of members

/+
* alias this
- implicit conversion
- member lookup (can extend/reuse scope import functionality)
+/
